#if !defined _MULTI_READ_SINGLE_WRITE_H_
#define _MULTI_READ_SINGLE_WRITE_H_
#include "MutexLock.h"
#include "SysInclude.h"
#include <unistd.h>

typedef struct _FREE_LONG_MULTI_READ_SINGLE_WRITE_LOCK_
{
	int         m_nReadCount;             //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	bool        m_bWriteFlag;             //Ð´ï¿½ï¿½Ö¾
	MUTEX       m_Lock;                   //ï¿½ï¿½Ð´ï¿½ï¿½
}FreeLongMultiReadSingleWriteLock;

const unsigned long FreeLongMultiReadSingleWriteLockSize=sizeof(FreeLongMultiReadSingleWriteLock);


inline void FreeLongMinSleep()
{
#ifdef WIN32
	Sleep(10);
#else
	struct timespec slptm;
	slptm.tv_sec=0;
	slptm.tv_nsec=1000;
	if(nanosleep(&slptm,NULL)==-1)
	{
		usleep(1);
	}
#endif
}

void inline MRSWLock_Create(FreeLongMultiReadSingleWriteLock* pLock)
{
	MUTEXINIT(&(pLock->m_Lock));              //ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½Ú²ï¿½ï¿½ï¿½
	pLock->m_nReadCount=0;
	pLock->m_bWriteFlag=false;
}


void inline MRSWLock_Destroy(FreeLongMultiReadSingleWriteLock* pLock)
{
	MUTEXLOCK(&(pLock->m_Lock));
	MUTEXUNLOCK(&(pLock->m_Lock));
	MUTEXDESTROY(&(pLock->m_Lock));
}

bool inline MRSWLock_GetWrites(FreeLongMultiReadSingleWriteLock* pLock)
{
	bool bRet=false;
	MUTEXLOCK(&(pLock->m_Lock));
	{
		bRet=pLock->m_bWriteFlag;
	}
	MUTEXUNLOCK(&(pLock->m_Lock));
	return bRet;
}


int inline MRSWLock_GetRead(FreeLongMultiReadSingleWriteLock* pLock)
{
	int  nRet=0;
	MUTEXLOCK(&(pLock->m_Lock));
	{
		nRet=pLock->m_nReadCount;
	}
	MUTEXUNLOCK(&(pLock->m_Lock));
	return nRet;
}


void inline MRSWLock_EnableWrite(FreeLongMultiReadSingleWriteLock* pLock)
{
	while(1)                   //ï¿½ï¿½Ñ­ï¿½ï¿½ï¿½È´ï¿½
	{
		MUTEXLOCK(&(pLock->m_Lock));
		{
			if(!pLock->m_bWriteFlag)
			{
				//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½Ö¾Îªï¿½ï¿½
				pLock->m_bWriteFlag=true;

				//ï¿½ï¿½ï¿½ï¿½ï¿½Ë³ï¿½
				MUTEXUNLOCK(&(pLock->m_Lock));

				//ï¿½ï¿½ï¿½ï¿½gotoï¿½ï¿½È·ï¿½ï¿½Î»
				goto MRSWLock_EnableWrite_Wait_Read_Clean;
			}
		}

		//ï¿½ï¿½ï¿½Í·ï¿½ï¿½Ú²ï¿½ï¿½ï¿½ï¿½ÙµÈ´ï¿½
		MUTEXUNLOCK(&(pLock->m_Lock));
		//Sleepï¿½ß³ï¿½
		FreeLongMinSleep();
	}

	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï£¬ï¿½ï¿½Ê¾ï¿½Ñ¾ï¿½ï¿½ï¿½È¡Ð´ï¿½ï¿½È¨ï¿½ï¿½
MRSWLock_EnableWrite_Wait_Read_Clean:
	//ï¿½È´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	while (MRSWLock_GetRead(pLock))
	{
		//ï¿½È´ï¿½ï¿½ï¿½ï¿½ÐµÄ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
		FreeLongMinSleep();
	}
}

void inline MRSWLock_DisableWrite(FreeLongMultiReadSingleWriteLock* pLock)
{
	MUTEXLOCK(&(pLock->m_Lock));
	{
		pLock->m_bWriteFlag=false;
	}
	MUTEXUNLOCK(&(pLock->m_Lock));			
}


int inline MRSWLock_AddRead(FreeLongMultiReadSingleWriteLock* pLock)
{
	while(1)                   //ï¿½ï¿½Ñ­ï¿½ï¿½ï¿½È´ï¿½,ï¿½ï¿½Ê¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³Ì²ï¿½ï¿½ï¿½ï¿½ï¿½Ò²ï¿½ï¿½Ü¿ï¿½ï¿½ï¿½ï¿½
	{
		MUTEXLOCK(&(pLock->m_Lock));
		{
			if(!pLock->m_bWriteFlag)
			{
				//ï¿½ï¿½ï¿½Û¼Ó£ï¿½ï¿½ï¿½ï¿½Í·ï¿½
				pLock->m_nReadCount++;
				//ï¿½ï¿½ï¿½ï¿½ï¿½Ë³ï¿½
				MUTEXUNLOCK(&(pLock->m_Lock));
			
				return MRSWLock_GetRead(pLock);
			}
		}
		
		//ï¿½ï¿½ï¿½Í·ï¿½ï¿½Ú²ï¿½ï¿½ï¿½ï¿½ÙµÈ´ï¿½
		MUTEXUNLOCK(&(pLock->m_Lock));
		//Sleepï¿½ß³ï¿½
		FreeLongMinSleep();
	}
}


int inline MRSWLock_DecRead(FreeLongMultiReadSingleWriteLock* pLock)
{
	int nRet=0;
	{
		MUTEXLOCK(&(pLock->m_Lock));
		{
			if(pLock->m_nReadCount>0)
			{
				//ï¿½ï¿½ï¿½Û¼Ó£ï¿½ï¿½ï¿½ï¿½Í·ï¿½
				pLock->m_nReadCount--;
				nRet=pLock->m_nReadCount;
			}
		}
		
		//ï¿½ï¿½ï¿½Í·ï¿½ï¿½Ú²ï¿½ï¿½ï¿½ï¿½ÙµÈ´ï¿½
		MUTEXUNLOCK(&(pLock->m_Lock));
		return nRet;
	}
}


void inline MRSWLock_Read2Write(FreeLongMultiReadSingleWriteLock* pLock)
{
	while(1)                   //ï¿½ï¿½Ñ­ï¿½ï¿½ï¿½È´ï¿½
	{
		MUTEXLOCK(&(pLock->m_Lock));
		{
			if(!pLock->m_bWriteFlag)
			{
				//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½Ö¾Îªï¿½ï¿½
				pLock->m_bWriteFlag=true;

				if(pLock->m_nReadCount>0)
				{
					//ï¿½ï¿½ï¿½Û¼Ó£ï¿½ï¿½ï¿½ï¿½Í·ï¿½
					pLock->m_nReadCount--;
				}
				
				//ï¿½ï¿½ï¿½ï¿½ï¿½Ë³ï¿½
				MUTEXUNLOCK(&(pLock->m_Lock));
				//ï¿½ï¿½ï¿½ï¿½gotoï¿½ï¿½È·ï¿½ï¿½Î»
				goto MRSWLock_Read2Write_Wait_Read_Clean;
			}
		}
		
		//ï¿½ï¿½ï¿½Í·ï¿½ï¿½Ú²ï¿½ï¿½ï¿½ï¿½ÙµÈ´ï¿½
		MUTEXUNLOCK(&(pLock->m_Lock));
		//Sleepï¿½ß³ï¿½
		FreeLongMinSleep();
	}
	
	//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ðµï¿½ï¿½ï¿½ï¿½ï£¬ï¿½ï¿½Ê¾ï¿½Ñ¾ï¿½ï¿½ï¿½È¡Ð´ï¿½ï¿½È¨ï¿½ï¿½
MRSWLock_Read2Write_Wait_Read_Clean:
	//ï¿½È´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	while (MRSWLock_GetRead(pLock))
	{
		//ï¿½È´ï¿½ï¿½ï¿½ï¿½ÐµÄ¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
		FreeLongMinSleep();
	}
}

#endif

